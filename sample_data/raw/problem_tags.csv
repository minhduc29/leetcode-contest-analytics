problem,tags
zigzag-grid-traversal-with-skip,"['Array', 'Matrix', 'Simulation']"
maximum-amount-of-money-robot-can-earn,"['Array', 'Dynamic Programming', 'Matrix']"
minimize-the-maximum-edge-weight-of-graph,"['Binary Search', 'Depth-First Search', 'Breadth-First Search', 'Graph', 'Shortest Path']"
count-non-decreasing-subarrays-after-k-operations,"['Array', 'Two Pointers', 'Stack', 'Segment Tree', 'Queue', 'Monotonic Stack', 'Monotonic Queue']"
maximum-subarray-with-equal-products,"['Array', 'Math', 'Sliding Window', 'Enumeration', 'Number Theory']"
find-mirror-score-of-a-string,"['Hash Table', 'String', 'Stack', 'Simulation']"
maximum-coins-from-k-consecutive-bags,"['Array', 'Binary Search', 'Greedy', 'Sliding Window', 'Sorting', 'Prefix Sum']"
maximum-score-of-non-overlapping-intervals,"['Array', 'Binary Search', 'Dynamic Programming', 'Sorting']"
substring-matching-pattern,"['String', 'String Matching']"
design-task-manager,"['Hash Table', 'Design', 'Heap (Priority Queue)', 'Ordered Set']"
longest-subsequence-with-decreasing-adjacent-difference,"['Array', 'Dynamic Programming']"
maximize-subarray-sum-after-removing-all-occurrences-of-one-element,"['Array', 'Dynamic Programming', 'Segment Tree']"
minimum-operations-to-make-columns-strictly-increasing,"['Array', 'Greedy', 'Matrix']"
find-the-lexicographically-largest-string-from-the-box-i,"['Two Pointers', 'String', 'Enumeration']"
count-special-subsequences,"['Array', 'Hash Table', 'Math', 'Enumeration']"
count-the-number-of-arrays-with-k-matching-adjacent-elements,"['Math', 'Combinatorics']"
minimum-number-of-operations-to-make-elements-in-array-distinct,"['Array', 'Hash Table']"
maximum-number-of-distinct-elements-after-operations,"['Array', 'Greedy', 'Sorting']"
smallest-substring-with-identical-characters-i,"['Array', 'Binary Search', 'Enumeration']"
smallest-substring-with-identical-characters-ii,"['String', 'Binary Search']"
count-subarrays-of-length-three-with-a-condition,['Array']
count-paths-with-the-given-xor-value,"['Array', 'Dynamic Programming', 'Bit Manipulation', 'Matrix']"
check-if-grid-can-be-cut-into-sections,"['Array', 'Sorting']"
subsequences-with-a-unique-middle-mode-i,"['Array', 'Hash Table', 'Math', 'Combinatorics']"
button-with-longest-push-time,['Array']
maximize-amount-after-two-days-of-conversions,"['Array', 'String', 'Depth-First Search', 'Breadth-First Search', 'Graph']"
count-beautiful-splits-in-an-array,"['Array', 'Dynamic Programming']"
minimum-operations-to-make-character-frequencies-equal,"['Hash Table', 'String', 'Dynamic Programming', 'Counting', 'Enumeration']"
transformed-array,"['Array', 'Simulation']"
maximum-area-rectangle-with-point-constraints-i,"['Array', 'Math', 'Binary Indexed Tree', 'Segment Tree', 'Geometry', 'Sorting', 'Enumeration']"
maximum-subarray-sum-with-length-divisible-by-k,"['Array', 'Hash Table', 'Prefix Sum']"
maximum-area-rectangle-with-point-constraints-ii,"['Array', 'Math', 'Binary Indexed Tree', 'Segment Tree', 'Geometry', 'Sorting']"
minimum-operations-to-make-array-values-equal-to-k,"['Array', 'Hash Table']"
minimum-time-to-break-locks-i,"['Array', 'Dynamic Programming', 'Backtracking', 'Bit Manipulation', 'Depth-First Search', 'Bitmask']"
digit-operations-to-make-two-integers-equal,"['Math', 'Graph', 'Heap (Priority Queue)', 'Number Theory', 'Shortest Path']"
count-connected-components-in-lcm-graph,"['Array', 'Hash Table', 'Math', 'Union Find', 'Number Theory']"
smallest-number-with-all-set-bits,"['Math', 'Bit Manipulation']"
identify-the-largest-outlier-in-an-array,"['Array', 'Hash Table', 'Counting', 'Enumeration']"
maximize-the-number-of-target-nodes-after-connecting-trees-i,"['Tree', 'Depth-First Search', 'Breadth-First Search']"
maximize-the-number-of-target-nodes-after-connecting-trees-ii,"['Tree', 'Depth-First Search', 'Breadth-First Search']"
